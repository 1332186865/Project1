#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
import matplotlib.pyplot as plt
from numpy import *


def loadDataSet(fileName, delim='\t'):
    """加载数据集

    Args:
        fileName: 文件名
        delim: 分隔符
    Returns:
        mat(datArr): 数据矩阵
    """
    fr = open(fileName)
    stringArr = [line.strip().split(delim) for line in fr.readlines()]  # 对读入数据以\t分隔存储到列表中
    datArr = [list(map(float, line)) for line in stringArr]  # 使用两个list来构建矩阵
    return mat(datArr)


def pca(dataMat, topNfeat=9999999):
    """PCA算法实现

    Args:
        dataMat: 用于进行PCA操作的数据集
        topNfeat: 应用的N个特征

    Returns:
        lowDataMat; reconMat: 降维后的数据集; 重构的数据集（用于调试）

    """
    meanVals = mean(dataMat, axis=0)  # 计算数据平均值
    meanRemoved = dataMat - meanVals  # 去中心化
    covMat = cov(meanRemoved.T)  # 计算协方差
    eigVals, eigVects = linalg.eig(covMat)  # 计算协方差矩阵的特征值和特征向量
    eigValInd = argsort(eigVals)  # 对特征值从小到大排序，并提取对应的index
    eigValInd = eigValInd[:-(topNfeat + 1):-1]  # 对特征排序结果逆序
    redEigVects = eigVects[:, eigValInd]  # 根据特征值排序结果得到topNfeat个最大的特征向量
    lowDataMat = meanRemoved * redEigVects  # 数据降维
    reconMat = (lowDataMat * redEigVects.T) + meanVals  # 数据重构（对比上面的计算公式）
    return lowDataMat, reconMat


def drawDataSet(dataMat, reconMat):
    """绘制数据集

    Args:
        dataMat: 原始数据集
        reconMat: 重构数据集
    """
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.scatter(dataMat[:, 0].flatten().A[0], dataMat[:, 1].flatten().A[0], marker='^', s=90)
    ax.scatter(reconMat[:, 0].flatten().A[0], reconMat[:, 1].flatten().A[0], marker='o', s=50, c='red')
    plt.show()


if __name__ == '__main__':
    dataMat = loadDataSet('pca_algo/testSet.txt')
    lowDMat, reconMat = pca(dataMat, 1)
    print("降维后的矩阵形状：\n", shape(lowDMat))
    drawDataSet(dataMat, reconMat)
