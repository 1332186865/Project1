#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
import matplotlib.pyplot as plt
from numpy import *


def loadDataSet(fileName):
    """加载数据集

    Args:
        fileName: 文件名
    Returns:
        dataMat:数据列表
    """
    dataMat = []
    fr = open(fileName)
    for line in fr.readlines():
        curLine = line.strip().split('\t')
        fltLine = list(map(float, curLine))  # 将数据转换为float型数据
        dataMat.append(fltLine)
    return dataMat


def distEclud(vecA, vecB):
    """计算向量欧氏距离

    Args:
        vecA: 向量A
        vecB: 向量B
    Returns:
        dist: 欧氏距离
    """
    # 实现使用距离计算公式并返回dist
    dist = sqrt(sum(power(vecA - vecB, 2)))
    # dist = linalg.norm(vecA-vecB)
    return dist


def randCent(dataSet, k):
    """为给定数据集构建一个包含k个随机质心的集合

    Args:
        dataSet: 数据集
        k: 质心个数
    Returns:
        centroids: 质心列表
    """
    n = shape(dataSet)[1]
    centroids = mat(zeros((k, n)))  # 创建存储质心的矩阵，初始化为0
    for j in range(n):  # 随机质心必须再整个数据集的边界之内
        minJ = min(dataSet[:, j])
        rangeJ = float(max(dataSet[:, j]) - minJ)  # 通过找到数据集每一维的最小和最大值
        centroids[:, j] = mat(minJ + rangeJ * random.rand(k, 1))  # 生成0到1之间的随机数，确保质心落在边界之内
    return centroids


def kMeans(dataSet, k, distMeas=distEclud, createCent=randCent):
    """K-均值算法

    Args:
        dataSet: 数据集
        k: 簇个数
        distMeas: 距离计算函数
        createCent: 创建初始质心函数
    Returns:
        centroids: 质心列表
        clusterAssment: 簇分配结果矩阵
    """
    # 确定数据集中数据点的总数
    m = shape(dataSet)[0]
    # 创建矩阵来存储每个点的簇分配结果,第一列记录簇索引值，第二列存储误差
    clusterAssment = mat(zeros((m, 2)))
    # 创建初始质心
    centroids = createCent(dataSet, k)
    # 标志变量，若为True，则继续迭代
    clusterChanged = True
    while clusterChanged:
        clusterChanged = False
        # 遍历所有数据找到距离每个点最近的质心
        for i in range(m):
            # 初始化最小距离为inf(无穷大) 索引为负
            min_dist = inf
            min_index = -1
            # 遍历所有质心
            for j in range(k):
                # 针对当前数据点, 计算质心与数据点之间的距离
                # 注意以行为开头 即 行向量 即对每个数据点计算其到每个类中心点的欧氏距离
                distance = distMeas(centroids[j, :], dataSet[i, :])
                if distance < min_dist:
                    # 每次进行判断是否比上次距离更小 进行存储更小的距离
                    # 直至比较到最后取到最小距离 【不保存所有距离，只保存最小距离】
                    min_dist = distance
                    min_index = j
            # 如果索引即 该数据点的归属类（簇）发生了改变 就继续进行循环
            if clusterAssment[i, 0] != min_index:
                clusterChanged = True
            # 将数据点分配到距其最近的簇，并保存距离平方和
            clusterAssment[i, :] = min_index, min_dist ** 2
        # 对每一个簇
        for cent in range(k):
            # 得到该簇中所有点的值 (找到 当前类质心 下的所有数据点)
            all_data = dataSet[nonzero(clusterAssment[:, 0].A == cent)[0]]  # .A 将矩阵转化为数组
            # 计算所有点的均值并更新为质心
            centroids[cent, :] = mean(all_data, axis=0)
    return centroids, clusterAssment


def drawDataSet(dataMat, centList, myNewAssments, k):
    """绘图

    Args:
        centList: 质心列表
        myNewAssments: 簇列表
        dataMat: 数据集
        k: 簇个数
    Returns:
        null
    """
    fig = plt.figure()
    rect = [0.1, 0.1, 0.8, 0.8]  # 绘制矩形
    scatterMarkers = ['s', 'o', '^', '8', 'p', 'd', 'v', 'h', '>', '<']  # 构建标记形状的列表用于绘制散点图
    ax1 = fig.add_axes(rect, label='ax1', frameon=False)
    for i in range(k):  # 遍历每个簇
        ptsInCurrCluster = dataMat[nonzero(myNewAssments[:, 0].A == i)[0], :]
        markerStyle = scatterMarkers[i % len(scatterMarkers)]  # 使用索引来选择标记形状
        ax1.scatter(ptsInCurrCluster[:, 0].flatten().A[0], ptsInCurrCluster[:, 1].flatten().A[0], marker=markerStyle,
                    s=90)
    ax1.scatter(centList[:, 0].flatten().A[0], centList[:, 1].flatten().A[0], marker='+', s=300)  # 使用"+"来标记质心
    plt.show()


if __name__ == '__main__':
    dataMat = mat(loadDataSet('kmeans_algo/testSet.txt'))
    centList, myNewAssments = kMeans(dataMat, 4)
    print(centList)
    drawDataSet(dataMat, centList, myNewAssments, 4)
