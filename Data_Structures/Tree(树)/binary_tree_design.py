#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
class BTNode:
    def __init__(self, d=None):
        self.data = d  # 结点值
        self.lchild = None
        self.rchild = None


class BTree(BTNode):
    def __init__(self, d=None):
        super().__init__(d)
        self.b = None

    def setroot(self, r):  # 设置根节点为r
        self.b = r

    # 求二叉链的括号表示串
    def dispbtree(self):  # 返回二叉链的括号表示串
        return self._dispbtree(self.b)

    def _dispbtree(self, t):  # 被DispBTree()方法请用
        if t is None:  # 空树返回空串
            return ""
        else:
            bstr = t.data  # 输出根结点值
            if t.lchild is not None or t.rchild is not None:
                bstr += "("  # 有孩子结点时输出“(”
                bstr += self._dispbtree(t.lchild)  # 递归输出左子树,
                if t.rchild is not None:
                    bstr += ","  # 有右孩子结点时输出”，”
                bstr += self._dispbtree(t.rchild)  # 递归输出右子树
                bstr += ")"  # 输出“)”
            return bstr

    # 查找值为x的结点
    def findnode(self, x):  # 查找值为x的结点的算法
        return self._findnode(self.b, x)

    def _findnode(self, t, x):  # 被FindNode()方法调用
        if t is None:
            return None  # t为空时返回None
        elif t.data == x:
            return t  # t所指结点值为x时返回t
        else:
            p = self._findnode(t.lchild, x)  # 在左子树中查找
            if p is not None:
                return p  # 在左子树中找到p结点,返回p
            else:
                return self._findnode(t.rchild, x)  # 返回在右子树中查找的结果

    # 求高度
    def height(self):  # 求二又树高度的算法
        return self._height(self.b)

    def _height(self, t):  # 被Height()方法调用
        if t is None:
            return 0  # 空树的高度为0
        else:
            lh = self._height(t.lchild)  # 求左子树的高度lchildh
            rh = self._height(t.rchild)  # 求右子树的高度rehildh
            return max(lh, rh) + 1


b = BTree('A')  # 建立各个结点
p1 = BTree('B')
p2 = BTree('C')
p3 = BTree('D')
p4 = BTree('E')
p5 = BTree('F')
p6 = BTree('G')
b.lchild = p1  # 建立结点间的关系
b.rchild = p2
p1.lchild = p3
p3.rchild = p6
p2.lchild = p4
p2.rchild = p5
b.setroot(b)
print(b.dispbtree())
print(b.findnode('G'))
print(b.height())
