#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-

# 链式存储结构
class BTNode:
    """二叉链中的结点类"""

    def __init__(self, d=None):
        self.data = d
        self.lchild = None
        self.rchild = None


b = BTNode('A')  # 建立各个结点
p1 = BTNode('B')
p2 = BTNode('C')
p3 = BTNode('D')
p4 = BTNode('E')
p5 = BTNode('F')
p6 = BTNode('G')
b.lchild = p1  # 建立结点间的关系
b.rchild = p2
p1.lchild = p3
p3.rchild = p6
p2.lchild = p4
p2.rchild = p5


# 相对于顺序存储结构，二又链方便进行二又树的修改。普通二又树和完全二又树适合二叉链存储。
# 在二叉链中查找一个结点的孩子结点十分方便，但査找一个结点的 n 结点需要遍历二叉树。

# 列表存储结构
class LNode:
    """列表存储结构的结点类"""

    def __init__(self, d=None):
        self.data = d  # 结点值
        self.lchild = None  # 左子树列表
        self.rchild = None  # 右子树列表


# 对应的递归算法如下:
def fun(b):  # 计算以b为根的二又树的结点值之和
    if b is None:
        return 0
    else:
        return b.data + fun(b.lchild) + fun(b.rchild)
