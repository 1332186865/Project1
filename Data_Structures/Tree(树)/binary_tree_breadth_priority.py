#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
from collections import deque  # 引用双端队列deque


class BTNode:
    def __init__(self, d=None):
        self.data = d  # 结点值
        self.lchild = None
        self.rchild = None


class BTree(BTNode):
    def __init__(self, d=None):
        super().__init__(d)
        self.b = None

    def setroot(self, r):  # 设置根节点为r
        self.b = r


def level_order(bt):  # 层次遍历的算法
    qu = deque()  # 将双端队列作为普通队列qu
    qu.append(bt.b)  # 根结点进队
    while len(qu) > 0:  # 队不空时循环
        p = qu.popleft()  # 出队一个结点
        print(p.data, end='')  # 访问p结点
        if p.lchild is not None:  # 有左孩子时将其进队
            qu.append(p.lchild)
        if p.rchild is not None:  # 有右孩子时将其进队
            qu.append(p.rchild)
    return qu


b1 = BTree('A')  # 建立各个结点
p1 = BTree('B')
p2 = BTree('C')
p3 = BTree('D')
p4 = BTree('E')
p5 = BTree('F')
p6 = BTree('G')
b1.lchild = p1  # 建立结点间的关系
b1.rchild = p2
p1.lchild = p3
p3.rchild = p6
p2.lchild = p4
p2.rchild = p5
b1.setroot(b1)
level_order(b1)
