#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
from SqStack import SqStack


class Stack(SqStack):
    """最小栈"""

    def __init__(self):
        super().__init__()
        self.__min_data = []

    def __min_empty(self):
        """判断min栈是否空"""
        return len(self.__min_data) == 0

    def __min_push(self, e):
        """元素进min栈"""
        self.__min_data.append(e)

    def __min_pop(self):
        """元素出min栈"""
        assert not self.__min_empty()  # 检测min栈为空的异常
        return self.__min_data.pop()

    def __min_get_top(self):
        """取min栈栈顶元素"""
        assert not self.__min_empty()  # 检测min栈为空的异常
        return self.__min_data[-1]

    def push(self, e):
        """元素进主栈"""
        if self.empty() or e < self.get_min():
            self.__min_data.append(e)  # 进min栈
        self.data.append(e)  # 进主栈

    def pop(self):
        """元素出主栈"""
        assert not self.empty()
        x = self.data.pop()
        if x == self.__min_get_top():  # 若栈顶元素为最小元素
            self.__min_pop()  # min栈出栈一次
        return x

    def get_min(self):
        """获取栈中最小元素"""
        assert not self.empty()  # 检测主栈为空的异常
        return self.__min_data[-1]  # 返回min栈的栈顶元素即主栈中最小元素


if __name__ == '__main__':
    st = Stack()
    print("元素5,6,3,7依次进栈")
    st.push(5)
    st.push(6)
    st.push(3)
    st.push(7)
    print("求最小元素并出栈")
    while not st.empty():
        print("最小元素:%d" % st.get_min(), end=' ')
        print("出栈元素:%d" % st.pop())
    print()
