#  Copyright (c) 2022. Generated by Gu.
INF = 0x3f3f3f3f


class ArcNode:
    """边结点"""

    def __init__(self, adjv, w):
        self.adjvex = adjv  # 邻接点
        self.weight = w  # 边的权值

    def __repr__(self):
        return "[%s, %s]" % (self.adjvex, self.weight)


class AdjGraph:
    """图邻接表法, 稀疏图节约空间"""

    def __init__(self, n=0, e=0):
        self.adjlist = []  # 邻接表数组
        self.vexs = []  # vexs[i]存放顶点i的信息， 暂时未用
        self.n = n  # 顶点数
        self.e = e  # 边数

    def create_adj_graph(self, a, n, e):
        """通过邻接矩阵数组a,顶点数n, 边数e建立图的邻接表"""
        self.n = n
        self.e = e
        for i in range(n):  # 检查边数组a中的每一个元素
            adi = []  # 顶点i的邻接点， 初始为空
            for j in range(n):
                if a[i][j] != 0 and a[i][j] != INF:  # 存在一条边
                    p = ArcNode(j, a[i][j])  # 创建<j, a[i][j]>出边的结点p
                    adi.append(p)  # 将结点p添加到adi中
            self.adjlist.append(adi)

    def dsip_adj_graph(self):
        """输出图的邻接表"""
        for i in range(self.n):  # 遍历每一个顶点i
            print(" [%d]" % i, end='')
            for p in self.adjlist[i]:
                print("->(%d, %d)" % (p.adjvex, p.weight), end='')
            print("->^")

    def degree1(self, v):
        """在无向图邻接表中求顶点v的度"""
        return len(self.adjlist[v])  # 顶点v的度为self.adjlist[v]的长度

    def degree2(self, v):
        """在有向图邻接表中求顶点v的出度与入度"""
        ans = [0, 0]  # [0]累计出度, [1]累计入度
        ans[0] = len(self.adjlist[v])  # 顶点v的出度是self.adjlist[v]的长度
        for i in range(self.n):  # 遍历所有头结点
            for p in self.adjlist[i]:
                if p.adjvex == v:  # 存在<i, v>的边
                    ans[i] += 1  # 顶点v的入度增加1
                    break
        return ans  # 返回出度与入度


adj = [
    [0, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 1],
    [0, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0]
    ]

adj1 = AdjGraph()
adj1.create_adj_graph(adj, 6, 7)
adj1.dsip_adj_graph()
