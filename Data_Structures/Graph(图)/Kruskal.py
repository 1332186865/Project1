#  Copyright (c) 2022. Generated by Gu.
import copy
from operator import itemgetter

INF = 0x3f3f3f3f
MAXV = 100


class MatGraph:
    """图邻接矩阵类"""

    def __init__(self, n=0, e=0):
        self.edges = []  # 邻接矩阵数组
        self.vexs = []  # vexs[i]存放顶点i的信息，暂时未用
        self.n = n  # 顶点数
        self.e = e  # 边数

    def create_mat_graph(self, a, n, e):
        """通过数组a，顶点n与边数e建立的图的邻接矩阵"""
        self.n = n
        self.e = e
        self.edges = copy.deepcopy(a)

    def disp_mat_graphs(self):
        """输出图的邻接矩阵数组"""
        for i in range(self.n):
            for j in range(self.n):
                if self.edges[i][j] == INF:
                    print("%5s" % "∞", end=' ')
                else:
                    print("%5d" % (self.edges[i][j]), end=' ')
            print()


def kruskal1(g):  # 求最小生成树
    vset = [-1] * MAXV  # 建立数组vset
    E = []  # 建立存放所有边的列表E
    for i in range(g.n):  # 由邻接矩阵g产生的边集数组E
        for j in range(i + 1, g.n):  # 对于无向图仅考虑上三角部分的边
            if g.edges[i][j] != 0 and g.edges[i][j] != INF:
                E.append([i, j, g.edges[i][j]])  # 添加[i,j,w]元素
    for i in range(len(E)):
        print("(%d,%d): %d" % (E[i][0], E[i][1], E[i][2]))
    E.sort(key=itemgetter(2))  # 按权值递增排序
    for i in range(g.n):
        vset[i] = i  # 初始化辅助数组
    cnt = 1  # cnt表示当前构造生成树的第几条边,初值为1
    j = 0  # 取E中边的下标,初值为0
    while cnt < g.n:  # 生成的边数小于n时循环
        u1, v1 = E[j][0], E[j][1]  # 取一条边的头尾顶点
        sn1 = vset[u1]
        sn2 = vset[v1]  # 分别得到两个顶点所属的集合编号
        if sn1 != sn2:  # 两顶点属于不同的集合,加入不会构成回路
            print("(%d,%d):%d" % (u1, v1, E[j][2]), end=' ')  # 输出最小生成树的边
            cnt += 1  # 生成边数增1
            for i in range(g.n):  # 两个集合统一编号
                if vset[i] == sn2:  # 集合编号为sn2的改为sn1
                    vset[i] = sn1
        j += 1  # 继续取E的下一条边


g = MatGraph()
n, e = 6, 10
a = [[0, 6, 1, 5, INF, INF],
     [6, 0, 5, INF, 3, INF],
     [1, 5, 0, 5, 6, 4],
     [5, INF, 5, 0, INF, 2],
     [INF, 3, 6, INF, 0, 6],
     [INF, INF, 4, 2, 6, 0]]
g.create_mat_graph(a, n, e)
g.disp_mat_graphs()
kruskal1(g)
