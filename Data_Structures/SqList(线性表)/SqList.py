#  Copyright (c) 2022. Generated by Gu.
#  coding=utf-8

class SqList:
    """顺序表类"""
    def __init__(self):
        self.initcapacity = 5
        self.capacity = self.initcapacity
        self.data = [None] * self.capacity
        self.size = 0

    def resize(self, newcapacity):
        assert newcapacity > 0
        olddata = self.data
        self.data = [None] * newcapacity
        self.capacity = newcapacity
        for i in range(self.size):
            self.data[i] = olddata[i]

    def create_list(self, a):
        for i in range(len(a)):
            if self.size == self.capacity:
                self.resize(self.capacity * 2)
            self.data[self.size] = a[i]
            self.size += 1

    def add(self, a):
        if self.size == self.capacity:
            self.resize(self.capacity * 2)
        self.data[self.size] = a
        self.size += 1

    def __len__(self):
        return self.size

    def __getitem__(self, item):
        assert 0 <= item <= self.size
        return self.data[item]

    def __setitem__(self, key, value):
        assert 0 <= key <= self.size
        self.data[key] = value

    def get_no(self, num):
        i = 0
        while i < self.size and self.data[i] != num:
            i += 1
        if i >= self.size:
            return -1
        else:
            return i

    def insert(self, i, e):
        assert 0 <= i < self.size
        if self.size == self.capacity:
            self.resize(2 * self.size)
        for j in range(self.size, i - 1, -1):
            self.data[j] = self.data[j - 1]
        self.data[i] = e
        self.size += 1

    def delete(self, i):
        assert 0 <= i <= self.size - 1
        for j in range(i, self.size - 1):
            self.data[j] = self.data[j + 1]
        self.size -= 1
        if self.capacity > self.initcapacity and self.size <= self.capacity / 4:
            self.resize(self.capacity // 2)

    def display(self):
        for i in range(self.size):
            print(self.data[i], end=' ')
        print()

    def __reversed__(self):
        i = 0
        j = self.size - 1
        while i < j:
            self.data[i], self.data[j] = self.data[j], self.data[i]
            i += 1
            j -= 1
        return self.display()

    def delete_k(self, i, k):
        assert i >= 0 and k >= 1 and 1 <= i + k < self.size
        for j in range(i, self.size - k):
            self.data[j] = self.data[j + k]
        self.size -= k
        return self.display()


if __name__ == '__main__':
    L = SqList()
    for _ in range(1, 6):
        L.add(_)
    print("L: ", end=''), L.display()
    # print("序号为2的元素={}".format(L[2]))
    # print("设置序号为2的元素为8")
    # L[2] = 8
    # print("序号为2的元素={}".format(L[2]))
    # n = len(L)
    # print("size=%d" % n)
    # for _ in range(0, n):
    #     print("删除%d序号的元素" % 0)
    #     L.delete(0)
    #     print("L: ", end=''), L.display()
    # print("size=%d" % len(L))
    L.delete_k(1, 2)
