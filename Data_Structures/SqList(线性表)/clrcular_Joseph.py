#  Copyright (c) 2022. Generated by Gu.
# [例2,16]编写一个程序求解约瑟夫(Joseph)问题,有n个小孩围成一圈,给他们从1开始依次编号,从编号为1的小孩开始报数,报m的小孩出列,
# 然后从出列的下一个小孩重新开始报数,报m的小孩又出列,如此反复,直到所有的小孩全部出列为止,求整个出列序列,例如当n=6、m=5时
# 出列序列是5,4,6,2,3,1
class Child:
    """不带头结点的循环单链表"""

    def __init__(self, nol):
        self.no = nol
        self.next = None


class Joseph:
    """求解约瑟夫问题类"""

    def __init__(self, n1, m1):
        self.n = n1
        self.m = m1
        self.first = Child(1)  # 循环单链表首结点
        t = self.first
        for i in range(2, self.n + 1):
            p = Child(i)  # 建立一个编号为i的新结点p
            t.next = p  # 将p结点链接到末尾
            t = p
        t.next = self.first  # 构成一个首结点为first的循环单链表

    def jsequence(self):
        """求约瑟夫序列"""
        for i in range(1, self.n + 1):
            p = self.first
            j = 1
            while j < self.m - 1:  # first报数至m-1个结点
                j += 1  # 报数递增
                p = p.next  # 移到下一个结点
            q = p.next  # 第m个结点
            print(q.no, end=' ')
            p.next = q.next
            self.first = p.next
        print()


if __name__ == '__main__':
    n = 6
    m = 3
    ls = Joseph(n, m)
    print("n=%d, m=%d的约瑟夫序列：" % (n, m))
    ls.jsequence()
