#  Copyright (c) 2022. Generated by Gu.
class LinkNode:
    """单链表结点类"""

    def __init__(self, data=None):
        self.data = data
        self.next = None

    def __repr__(self):
        return "%d" % self.data


class CLinkList:
    """循环单链表类"""

    def __init__(self):
        self.head = LinkNode()
        self.head.next = self.head

    def create_list_f(self, a):
        """头插法：由数组a整体建立单链表"""
        for i in range(0, len(a)):  # 循环建立数据结点s
            s = LinkNode(a[i])  # 新建存放a[i]的结点s
            s.next = self.head.next  # 把s插入开始结点前，头结点之后
            self.head.next = s

    def create_list_r(self, a):
        """尾插法：由数组a整体建立单链表 O(n)"""
        t = self.head
        for i in range(0, len(a)):  # t始终指向尾结点，开始时指向头结点
            s = LinkNode(a[i])  # 新建存放a[i]的结点s
            t.next = s  # 把s插入t结点之后
            t = s
        t.next = self.head  # 将尾结点的next成员置空

    def geti(self, i):
        """返回序号为i的结点 O(n)"""
        p = self.head
        j = -1
        while j < i:
            j += 1
            p = p.next
            if p == self.head:
                break
        return p

    def add(self, e):
        """单链表末尾添加元素e O(n)"""
        s = LinkNode(e)
        p = self.head
        while p.next != self.head:  # 查找尾结点
            p = p.next
        p.next = s
        s.next = self.head  # 插入

    def getsize(self):
        """返回长度 O(n)"""
        p = self.head
        cnt = 0
        while p.next != self.head:  # 找到尾结点为止
            cnt += 1
            p = p.next
        return cnt

    def __getitem__(self, item):
        """序号item的元素 O(n)"""
        assert item >= 0
        p = self.geti(item)  # 查找序号item的结点p
        assert p != self.head
        return p.data

    def __setitem__(self, key, value):
        """设置序号key的元素"""
        assert key >= 0
        p = self.geti(key)
        assert p != self.head  # 查找序号key的结点p
        p.data = value

    def get_no(self, e):
        """查找第一个值为e的元素的序号"""
        j = 0
        p = self.head.next
        while p != self.head and p.data != e:
            j += 1  # 查找元素e
            p = p.next
        if p == self.head:
            return -1
        else:
            return j

    def insert(self, i, e):
        """插入e作为第i个元素"""
        assert i >= 0
        s = LinkNode(e)
        p = self.geti(i - 1)  # 查找序号为i-1的结点p
        assert p != self.head
        s.next = p.next  # 在p后插入s
        p.next = s

    def delete(self, i):
        """删除序号i位置的元素"""
        assert i >= 0
        p = self.geti(i - 1)  # 查找序号为i-1的结点p
        assert p != self.head and p.next != self.head
        p.next = p.next.next  # 删除p结点的后继结点

    def display(self):
        """输出单链表"""
        p = self.head.next
        while p != self.head:
            print(p.data, end=' ')
            p = p.next
        print()

    def count(self, x):
        """求值为x的结点个数"""
        cnt = 0
        p = self.head.next
        while p != self.head:
            if p.data == x:
                cnt += 1  # 找到一个值+1
            p = p.data  # p后移一个结点
        return cnt


a1 = CLinkList()
a1.create_list_r([1, 2, 3, 4, 5, 6])
a1.add(7)
print(a1.geti(3))
a1.display()
print(a1.getsize())
print(a1[0])
a1[3] = 15
print(a1.get_no(5))
a1.insert(6, 50)
a1.delete(1)
a1.display()
