#  Copyright (c) 2022. Generated by Gu.
class DLinkNode:
    """双链表结点类"""

    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prior = None


class DLinkList:
    """双链表类"""

    def __init__(self):
        self.dhead = DLinkNode()
        self.dhead.next = None
        self.dhead.prior = None

    # 在p后插入s: s.next = p.next; s.next.prior = s; s.prior = p; p.next = s
    # 删除p结点: p.next.prior = p.prior; p.prior.next = p.next

    def __len__(self):
        length = 0
        node = self.dhead
        while node.next is not None:
            length += 1
            node = node.next
        return length

    def create_list_f(self, a):
        """头插法：由数组a整体建立双链表 n n"""
        for i in range(0, len(a)):
            s = DLinkNode(a[i])  # 新建存放a[i]元素的结点s，插入表头
            s.next = self.dhead.next  # 修改s结点的next成员
            if self.dhead.next is not None:  # 修改头结点的非空后继结点的prior
                self.dhead.next.prior = s
            self.dhead.next = s  # 修改头结点的next
            s.prior = self.dhead  # 修改s结点的prior

    def create_list_r(self, a):
        """尾插法：由数组a整体建立双链表 n n"""
        t = self.dhead  # t始终指向尾结点，开始时指向头结点
        for i in range(0, len(a)):
            s = DLinkNode(a[i])
            t.next = s  # 将s结点插入t结点之后
            s.prior = t
            t = s
        t.next = None  # 将尾结点的next成员置为None

    def geti(self, index):
        """返回序号为i的结点 O(n)"""
        p = self.dhead
        j = -1
        while j < index and p is not None:
            j += 1
            p = p.next
        return p

    def add(self, e):
        """双链表末尾添加元素e O(n)"""
        s = DLinkNode(e)
        p = self.dhead
        while p.next is not None:  # 查找尾结点
            p = p.next
        p.next = s  # 插入

    def getsize(self):
        """返回长度 O(n)"""
        p = self.dhead
        cnt = 0
        while p.next is not None:  # 找到尾结点为止
            cnt += 1
            p = p.next
        return cnt

    def __getitem__(self, item):
        """序号item的元素 O(n)"""
        assert item >= 0
        p = self.geti(item)  # 查找序号item的结点p
        assert p is not None
        return p.data

    def __setitem__(self, key, value):
        """设置序号key的元素"""
        assert key >= 0
        p = self.geti(key)
        assert p is not None  # 查找序号key的结点p
        p.data = value

    def get_no(self, e):
        """查找第一个值为e的元素的序号"""
        j = 0
        p = self.dhead.next
        while p is not None and p.data != e:
            j += 1  # 查找元素e
            p = p.next
        if p is None:
            return -1
        else:
            return j

    def insert(self, i, e):
        """序号i处插入e n"""
        assert i >= 0
        s = DLinkNode(e)
        p = self.geti(i - 1)  # 查找序号i-1的结点p
        assert p is not None
        s.next = p.next
        if p is not None:  # 修改p的非空后继结点的prior属性
            p.next.prior = s
        p.next = s
        s.prior = p

    def delete(self, i):
        """删除序号为i的元素 n"""
        assert i >= 0
        p = self.geti(i)
        assert p is not None
        p.prior.next = p.next  # 修改p前驱节点的next
        if p.next is not None:  # 修改p结点的非空后继结点的prior
            p.next.prior = p.prior

    def display(self):
        """输出单链表"""
        p = self.dhead.next
        while p is not None:
            print(p.data, end=' ')
            p = p.next
        print()

    def del_x(self, x):
        """删除整数双链表L中第一个值为x的结点，若不存在则无改变"""
        p = self.dhead.next
        while p is not None and p.data != x:  # 查找第一个值为x的结点p
            p = p.next
        if p is not None:  # 找到
            p.prior.next = p.next  # 删除p结点
            if p.next is not None:
                p.next.prior = p.prior

    def swap(self, x):
        """将最后一个值为x的结点与其前驱节点交换，如果不存在x或x为首结点则不变"""
        p = self.dhead.next
        q = None
        while p is not None:
            if p.data == x:  # 查找最后一个值为x的结点
                q = p
            p = p.next
        if q is None or self.dhead.next == q:  # 不存在或为首结点
            return
        else:
            pre = q.prior
            pre.next = q.next
            if q.next is not None:
                q.next.prior = pre
            pre.prior.next = q
            q.prior = pre.prior
            q.next = pre
            pre.prior = q


a1 = DLinkList()
a1.create_list_r([1, 2, 3, 4, 5, 6, 7])
a1.add(8)
a1.display()
print(a1.geti(5))
print(len(a1))
print(a1.__getitem__(5))
a1.__setitem__(3, 10)
a1.display()
print(a1.get_no(6))
