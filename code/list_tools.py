#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8
"""
    针对列表的自定义工具
"""


class ListHelper:
    """
        针对列表的自定义工具
    """

    @staticmethod
    def find_all(target: list, func_condition):
        """
            查找列表中满足条件的所有元素 filter
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数
                                是否满足条件bool值
                                示例：lambda item: item.hp > 10
        :return: 生成器
        """
        for item in target:
            if func_condition(item):
                yield item

    @staticmethod
    def first(target: list, func_condition):
        """
            查找列表中第一个满足条件的元素
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp > 10
        :return: 第一个符合条件的值
        """
        for item in target:
            if func_condition(item):
                return item

    @staticmethod
    def select(target: list, func_condition):
        """
            筛选符合条件的值的详细参数 map
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp > 10
        :return: 筛选符合条件的值的详细参数
        """
        for item in target:
            yield func_condition(item)

    @staticmethod
    def sum_values(target: list, func_condition):
        """
            计算符合条件的值的某一参数的和
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp > 10
        :return: 计算符合条件的值的某一参数的和
        """
        sum_values = 0
        for item in target:
            sum_values += func_condition(item)
        return sum_values

    @staticmethod
    def last(target: list, func_condition):
        """
            获取最后一个符合条件的值的参数
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp > 10
        :return: 获取最后一个符合条件的值的参数
        """
        for i in range(len(target) - 1, -1, -1):
            if func_condition(target[i]):
                return target[i]

    @staticmethod
    def get_count(target: list, func_condition):
        """
            获取满足条件的对象总数
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp > 10
        :return 获取满足条件的对象总数
        """
        count_value = 0
        for item in target:
            if func_condition(item):
                count_value += 1
        return count_value

    @staticmethod
    def exists(target: list, func_condition):
        """
            判断是否包含满足条件的对象
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp == 0
        :return 判断是否包含满足条件的对象
        """
        for item in target:
            if func_condition(item):
                return True
        return False

    @staticmethod
    def delete_all(target: list, func_condition):
        """
            删除满足条件的所有对象
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp == 0
        :return 返回删除的对象总数
        """
        del_count = 0
        for i in range(len(target) - 1, -1, -1):
            if func_condition(target[i]):
                del target[i]
                del_count += 1
        return del_count

    @staticmethod
    def get_best(target: list, func_condition):
        """
            获取指定条件的最大对象(第一个) max青春版
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp
        :return 返回指定条件的最大对象(第一个)
        """
        temp = target[0]
        for i in range(1, len(target)):
            if func_condition(target[i]) > func_condition(temp):
                temp = target[i]
        return temp

    @staticmethod
    def order_by(target: list, func_condition):
        """
            根据指定条件升序排列 sorted青春版
        :param target: 列表
        :param func_condition: 条件: 函数/方法类型参数 可写lambda函数 lambda item: item.hp
        :return None
        """
        for i in range(len(target) - 1):
            for j in (i + 1, len(target)):
                if func_condition(target[i]) > func_condition(target[j]):
                    target[i], target[j] = target[j], target[i]

