#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
import time


class RulesManager:
    """
        规则库管理
    """

    def __init__(self):
        self.rules = {}
        self.__file_path = r'rules.txt'

    def get_rules(self):
        """
            加载规则

        :return: rules字典
        """
        self.__read_rules()
        return self.rules

    def __store_files(self):
        """
            将内容写入文件
        """
        with open(self.__file_path, 'w', encoding='utf-8') as f:
            for i, j in self.rules.items():
                f.write("IF" + " " + i + " " + "THEN" + " " + j + "\n")

    def add_rule(self, new_premise, new_conclusion):
        """
            增加规则

        :param new_premise: 新前提
        :param new_conclusion: 新结论
        """
        self.rules[new_premise] = new_conclusion
        self.__store_files()

    def delete_rule(self, premise, conclusion):
        """
            删除规则

        :param conclusion: 前提
        :param premise: 结论
        :return: Bool
        """
        for item in self.rules:
            if premise == item and conclusion == self.rules[item]:
                self.rules.pop(premise)
                self.__store_files()
                return True
        return False

    def __read_rules(self):
        """
        生成规则字典
            - 字典的键：前提
            - 字典的值：结论
        """
        try:
            with open(self.__file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.replace('IF', '').strip()
                    temp = line.split(' THEN ')
                    premise = temp[0]
                    conclusion = temp[1]
                    self.rules[premise] = conclusion
        except FileNotFoundError:
            print('规则文件错误！')


class InferenceEngine:
    """
        推理机
    """

    def __init__(self):
        self.__rules = {}

    def match_rules(self, facts):
        """
            根据事实作出推理

        :param facts: 事实
        :return: 推理结果
        """
        self.__rules = RulesManager().get_rules()
        is_end = False
        match = False
        while not is_end:
            i = 0
            for premise in self.__rules:
                flag = True
                pre = premise.split(' AND ')
                for p in pre:  # 遍历条件
                    if p in facts:
                        match = True
                    else:
                        flag = False
                if flag:
                    print('该动物：' + premise + ' -> ' + self.__rules[premise])
                    for p in pre:
                        facts = facts.replace(p, ' ')  # 去掉得出小结论的小条件
                    facts = facts + self.__rules[premise]  # 加上需要的小结论作为条件
                else:
                    i += 1
            if i == len(self.__rules):
                is_end = True
                if not match:
                    print("未发现匹配项")


class Viewer:
    """
        界面显示类
    """

    def __init__(self):
        self.__rm = RulesManager()
        self.__ie = InferenceEngine()

    def __print_rules(self):
        """打印规则"""
        for i, j in self.__rm.rules.items():
            print('前提： %s -> 结论： %s' % (i, j))
        time.sleep(3)

    def __judge(self):
        """动物识别"""
        print('--------动物识别----------')
        print('请按照规则库中的前提来阐述事实', end='\n\n')
        facts = input('请输入事实：')  # 输入动物特征
        self.__ie.match_rules(facts)  # 根据特征匹配
        time.sleep(3)

    def __add_rules(self):
        """添加规则"""
        a = input("请输入判断前提：")
        b = input("请输入判断的结果：")
        self.__rm.rules[a] = b
        self.__rm.add_rule(a, b)
        print('添加成功！')
        time.sleep(3)

    def __delete_rules(self):
        """删除规则"""
        a = input("请输入判断条件：")
        b = input("请输入可以判断的结果：")
        if self.__rm.delete_rule(a, b):
            print("删除成功！")
            time.sleep(3)
        else:
            print('请检查输入！')
            time.sleep(3)

    def __display(self):
        """菜单显示"""
        self.__show_menu()
        n = input("请选择:")
        if n == '1':
            self.__print_rules()
        elif n == '2':
            self.__judge()
        elif n == '3':
            self.__add_rules()
        elif n == '4':
            self.__delete_rules()
        elif n == 'q':
            print('诶嘿！')
            raise SystemExit
        else:
            print("输出有误，请重新输入！")

    @staticmethod
    def __show_menu():
        """菜单界面"""
        print("+------------------------+")
        print("| 1)打印规则库             |")
        print("| 2)输入事实               |")
        print("| 3)添加规则               |")
        print("| 4)删除规则               |")
        print("| q)退出                  |")
        print("+------------------------+")

    def main(self):
        self.__rm.get_rules()
        while True:
            self.__display()


if __name__ == '__main__':
    # temp1 = RulesManager()
    # temp1.read_rules()
    # temp1.add_rule('游泳', '鱼')
    # temp1.delete_rule('游泳', '鱼')
    # temp2 = Viewer()
    # temp2.main()
    temp3 = InferenceEngine()
    temp3.match_rules('暗斑点 长脖子 长腿 奶 蹄')
    # Viewer().main()
