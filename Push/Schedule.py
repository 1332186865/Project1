#  Copyright (c) 2023. Generated by Gu.
#  -*- coding=utf-8 -*-
import json
import re


class Schedule:
    """
    课程表数据导入
    """

    def __init__(self, filename):
        """

        Args:
            filename: 资源文件名
        """
        self.filename = filename
        self.time_table = []
        self.information = {}
        self.course_name = []
        self.course_data = []
        self.prepare()

    def prepare(self):
        """文件准备

        Args:
            self: 文件位置

        Returns:
            time_table, information, course, room
        """
        data = []
        try:
            with open(self.filename, 'r', encoding='utf-8') as file:
                for line in file:
                    line = re.sub('[说明]', '', line)
                    data.append(line)
            self.orig_time(data[1])
            self.orig_info(data[2])
            self.orig_course_name(data[3])
            self.orig_course_data(data[4])
        except FileNotFoundError:
            print("文件错误")

    def orig_time(self, data):
        """时间整理

        Args:
            data:源数据

        Returns:
            list: 时间列表
        """
        data = json.loads(data)
        temp = []
        for element in data:
            line = {"node": element["node"], "startTime": element["startTime"], "endTime": element["endTime"]}
            temp.append(line)
        self.time_table = temp

    def time_matching(self, node, step):
        """时间匹配

        Args:
            node: 时间节点
            step: 步长

        Returns:
            list: 匹配到的时间
        """
        data = [self.time_table[node - 1]["startTime"], self.time_table[node + step - 2]["endTime"]]
        return data[0], data[1]

    def orig_info(self, data):
        """附加信息整理

        Args:
            data:源数据

        Returns:
            dict: 附加信息字典
        """
        data = json.loads(data)
        line = {"maxWeek": data["maxWeek"], "nodes": data["nodes"], "startDate": data["startDate"]}
        self.information = line

    def orig_course_name(self, data):
        """课程名字整理

        Args:
            data:源数据

        Returns:
            list: 整理后的课程名字列表
        """
        data = json.loads(data)
        temp = []
        for element in data:  # 关键词替换
            line = {'courseName': element['courseName'], 'id': element['id']}
            line['courseName'] = re.sub('【本】', '【全】', line['courseName'])
            if '国' in line['courseName']:
                line['courseName'] = re.sub('【全】', '【商】', line['courseName'])
            if '译' in line['courseName']:
                line['courseName'] = re.sub('【全】', '【译】', line['courseName'])
            if '语料库' in line['courseName']:
                line['courseName'] = re.sub('【全】', '【译】', line['courseName'])
            if '企业' in line['courseName']:
                line['courseName'] = re.sub('【全】', '【商】', line['courseName'])
            temp.append(line)
        self.course_name = temp

    def match_name(self, i_num):
        """课程名称匹配"""
        for course in self.course_name:
            if i_num == course['id']:
                return course['courseName']

    def orig_course_data(self, data):
        """课程数据整理

        Args:
            data: 源数据

        Returns:
            list: 整理后的课程数据列表
        """
        data = json.loads(data)
        temp = []
        for element in data:
            line = {'courseName': self.match_name(element['id']),
                    'startNode': element["startNode"],
                    'step': element["step"],
                    'day': element["day"],
                    'startWeek': element["startWeek"],
                    'endWeek': element["endWeek"],
                    'room': element["room"],
                    'teacher': element["teacher"],
                    "startTime": self.time_matching(element['startNode'], element['step'])[0],
                    "endTime": self.time_matching(element['startNode'], element['step'])[1],
                    'type': element["type"],
                    }
            temp.append(line)
        self.course_data = temp

    def display(self):
        """输出信息

        Returns: None
        """
        print(self.time_table)
        print(self.information)
        print(self.course_name)
        print(self.course_data)

    def get_orig_course_data(self):
        """返回课程源数据"""
        return self.course_data

    def get_start_date(self):
        """获取学期开始时间"""
        date = self.information['startDate']
        temp = re.findall(r"(\d*)-(\d*)-(\d*)", date)
        return int(temp[0][0]), int(temp[0][1]), int(temp[0][2])


if __name__ == '__main__':
    Sch = Schedule('schedule/23秋_翻译.wakeup_schedule')
    Sch.display()
