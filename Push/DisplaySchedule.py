#  Copyright (c) 2023. Generated by Gu.
#  -*- coding=utf-8 -*-
from datetime import date, datetime, timedelta

from Schedule import Schedule


class PushSchedule:
    def __init__(self, today_str=None):
        """基本参数

        Args:
            today_str: 今天的时间对应的课表，不设置返回明天的课表

        Returns:
            object: None
        """
        self.tomorrow = date.today() + timedelta(days=1)
        if today_str:
            self.tomorrow = datetime.strptime(today_str, "%Y%m%d")
        self.week_num = None  # 第几周
        self.week_day = None  # 周几
        self.S1 = Schedule('schedule/23秋_翻译.wakeup_schedule')
        self.S2 = Schedule('schedule/23秋_商务.wakeup_schedule')
        self.S3 = Schedule('schedule/23秋_其他.wakeup_schedule')
        self.S4 = Schedule('schedule/考试.wakeup_schedule')
        self.start_time = None
        self.schedule = []
        self.type = 0  # 单双周

        self.is_examination = False  # 是否启用考试

    def week_check(self):
        """周信息"""
        week_num = self.tomorrow.isocalendar()[1] - self.start_time.isocalendar()[1] + 1
        week_day = self.tomorrow.isocalendar()[2]
        self.week_num = week_num
        self.week_day = week_day
        if self.week_num % 2 == 0:
            self.type = 2
        else:
            self.type = 1

    def term_start_time(self, or_data: Schedule) -> None:
        """设置学期开始日

        Args:
            or_data: 导入开始日的课表
        """
        year, month, day = or_data.get_start_date()
        self.start_time = date(year, month, day)

    def course_check(self):
        """课程信息"""
        if self.is_examination:
            self.term_start_time(self.S4)
            data = self.S4.get_orig_course_data()
        else:
            self.term_start_time(self.S1)
            data = self.S1.get_orig_course_data()
            data_1 = self.S2.get_orig_course_data()
            data_2 = self.S3.get_orig_course_data()
            for x in data_1:
                if x not in data:
                    data.append(x)
            for x in data_2:
                if x not in data:
                    data.append(x)
        # print(data)

        self.week_check()
        temp = [course for course in data if int(course['startWeek']) <= self.week_num <= int(course['endWeek'])
                and course['day'] == self.week_day]
        for course in temp:
            del course['startWeek']
            del course['endWeek']
        temp = [course for course in temp if int(course['type']) == 0 or int(course['type']) == self.type]
        temp_1 = []
        for x in temp:
            if x not in temp_1:
                temp_1.append(x)
        temp_1.sort(key=lambda x0: x0['startNode'])
        self.schedule = temp_1

    def display(self):
        """输出课程信息

        Returns:
            str: 课程
        """
        temp = ''
        for course in self.schedule:
            temp += f"\n{course['courseName']}, {course['room']},{course['startTime']}-{course['endTime']}"
        if not temp:
            if self.is_examination:
                temp += '\n明日复习'
            else:
                temp += '\n明日无课'

        return temp

    def main(self):
        """主函数"""
        self.course_check()
        return self.display()


if __name__ == '__main__':
    text = PushSchedule().main()
    print(text)
