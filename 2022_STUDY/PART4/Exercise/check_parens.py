#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
from SqStack import *

text = '''Prints the values to (a stream,) or to sy()}s.stdout by default. Optional keyword arguments: file: a 
file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space.\
 end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.'''
parens = "(){}[]"
left_parens = "([{"
opposite = {')': '(', ']': '[', '}': '{'}


def parent(text):
    i, text_len = 0, len(text)
    while True:
        while i < text_len and text[i] not in parens:
            i += 1
        if i >= text_len:
            return
        else:
            yield text[i], i
            i += 1


st = SqStack()
for pr, i in parent(text):
    if pr in left_parens:
        st.push((pr, i))
    elif st.is_empty() or st.pop()[0] != opposite[pr]:
        print('Unmatching is found at %d for %s' % (i, pr))
        break
else:
    # 循环正常结束
    if st.is_empty():
        print('All parentheses are matched!')
    else:
        e = st.pop()
        print('Unmatching is found at %d for %s' % (e[1], e[0]))
