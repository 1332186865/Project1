#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
"""
    二叉树构建与遍历
"""
from Squeue import Squeue


class TreeNode:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right


class BiTree:
    def __init__(self, root=None):
        self.root = root

    def is_empty(self):
        if self.root is None:
            return True
        return False

    def pre_order(self, node: TreeNode):
        if node is None:
            return
        print(node.data, end=' ')
        self.pre_order(node.left)
        self.pre_order(node.right)

    def in_order(self, node: TreeNode):
        if node is None:
            return
        self.in_order(node.left)
        print(node.data, end=' ')
        self.in_order(node.right)

    def post_order(self, node: TreeNode):
        if node is None:
            return
        self.post_order(node.left)
        self.post_order(node.right)
        print(node.data, end=' ')

    def level_order(self, node):
        qu = Squeue()
        qu.enqueue(node)
        while not qu.is_empty():
            node = qu.dequeue()
            print(node.data, end=' ')
            if node.left:
                self.level_order(node.left)
            if node.right:
                self.level_order(node.right)


if __name__ == '__main__':
    b = TreeNode('B')
    f = TreeNode('F')
    g = TreeNode('G')
    d = TreeNode('D', f, g)
    i = TreeNode('I')
    h = TreeNode('H')
    e = TreeNode('E', i, h)
    c = TreeNode('C', d, e)
    a = TreeNode('A', b, c)
    bt = BiTree(a)
    bt.pre_order(a)
    print()
    bt.in_order(a)
    print()
    bt.post_order(a)
    print()
    bt.level_order(a)
