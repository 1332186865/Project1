#  Copyright (c) 2022. Generated by Gu.
#  -*- coding=utf-8 -*-
"""
    天龙八部技能系统
"""


class ImpactEffect:
    """
        影响效果
        隔离技能释放器 与 具体的影响效果
    """

    def impact(self):
        """影响"""
        # 要求子类必须实现，否则报错
        raise NotImplementedError


class LowerDefense:
    """
        降低防御力
    """

    def __init__(self, distance, ratio):
        """

        :param distance: 距离
        :param ratio: 比例
        """
        self.distance = distance
        self.ratio = ratio

    def impact(self):
        print('降低%d米内，目标的防御力为%d。' % (self.distance, self.ratio))


class LowerSpeed:
    """
        降低速度
    """

    def __init__(self, time, ratio):
        """

        :param time: 时间
        :param ratio: 比例
        """
        self.time = time
        self.ratio = ratio

    def impact(self):
        print('降低标的速度为%d, 时间为%d。' % (self.ratio, self.time))


class Damage:
    """
        伤害生命
    """

    def __init__(self, value):
        """

        :param value: 伤害值
        """
        self.value = value

    def impact(self):
        print('伤害%d生命' % self.value)


class SkillDeployer:
    """
        技能释放器
    """

    def __init__(self, name):
        self.name = name
        # 配置释放器, 存储当前技能具有的所有影响效果对象
        self.__list_impact = self.__config_deployer()

    def __config_deployer(self):
        """
            配置释放器
        :return:
        """
        # 定义配置， 读取相应的影响效果， 创建影响效果对象
        dict_skill_config = {
            '韦陀杵': ['LowerDefense(10, 0.5)', 'Damage(30)'],
            '降龙十八掌': ['LowerSpeed(5, 0.2)', 'Damage(80)']
            }
        # 根据技能名称
        list_impact_name = dict_skill_config[self.name]
        # 创建影响效果对象，并返回
        return [eval(item) for item in list_impact_name]

    def generate_skill(self):
        """
            手册技能
        :return:
        """
        # 执行所有影响效果
        for item in self.__list_impact:
            item.impact()


class SkillData:
    def __init__(self, id, name, cd, atk, costSP):
        self.id = id
        self.name = name
        self.cd = cd
        self.atk = atk
        self.costSP = costSP

    def __repr__(self):
        return '%s' % self.name


def find_answer(target, func):
    for i in target:
        if func(i):
            # 生成器 告诉 客户端代码 的结果是右边
            value = yield i
            print('生成器收到的内容', value)


def condition1(item):
    return item.atk >= 10


# lambda : item.atk >= 10

def condition2(item):
    return item % 2 != 0


def condition3(item):
    return item < 3


def find_demo1(target):
    for i in range(len(target) - 1, -1, -1):
        if target[i].atk >= 10:
            return target[i].name


if __name__ == '__main__':
    list_Skills = [
        SkillData(101, '降龙十八掌', 60, 10, 5),
        SkillData(102, '如来神掌', 50, 5, 15),
        SkillData(103, '六脉神剑', 80, 20, 0),
        SkillData(104, '一阳指', 20, 50, 15),
        SkillData(105, '冷酷追击', 15, 30, 9)
        ]

    # wei_tuo_chu = SkillDeployer('韦陀杵')
    # wei_tuo_chu.generate_skill()

    # results = find_answer(list_Skills, lambda x: x.atk >= 10)
    # item = results.__next__()
    # print(item)
    # while True:
    #     try:
    #         item = results.send('apple')
    #         print(item)
    #     except:
    #         break

    # result2 = (item for item in list_Skills if item.atk > 10 and item.costSP == 0)
    # for i in result2:
    #     print(i)

    print(find_demo1(list_Skills))
